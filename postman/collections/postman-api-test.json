{
	"info": {
		"_postman_id": "59400164-ddb8-4fc6-8f3e-017e6c08775f",
		"name": "postman-api-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "8842076-59400164-ddb8-4fc6-8f3e-017e6c08775f"
	},
	"item": [
		{
			"name": "GET-All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'page' field in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.page).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Validate the per_page field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'data' array is present and contains at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript",
						"id": "9e6e72a6-a0a7-4a6f-868c-2250266e790d"
					}
				}
			],
			"id": "90ee15af-8fef-4e8e-94ef-b6fc67d9e670",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-Page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'page' field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.page).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'per_page' field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.per_page).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate the 'total' field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.total).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate total_pages field in the response\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.have.property('total_pages');",
							"});"
						],
						"type": "text/javascript",
						"id": "2c6c48e5-5e23-45f5-bb09-eca0ab3f928c"
					}
				}
			],
			"id": "3bfc6210-d95a-4468-b71a-11ef92a46c6c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.data.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the support object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"URL and text fields in the support object are non-empty strings\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.support.url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"URL should not be empty\");",
							"    pm.expect(responseData.support.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"id": "bf119050-468a-4729-9d60-201e0f4ae3f9"
					}
				}
			],
			"id": "2abc3892-66df-49cb-a5ca-67b780ff4209",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/6",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.job).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.id).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.createdAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"id": "c6f01bac-08a2-468c-885d-94e087512f09"
					}
				}
			],
			"id": "60e9abf5-1d49-4fff-a9fc-5dd7722c45d8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.job).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"UpdatedAt is a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"UpdatedAt should be in valid date format\");",
							"});"
						],
						"type": "text/javascript",
						"id": "4dcaa897-a7dd-42ba-b3ce-a243fc1d7739"
					}
				}
			],
			"id": "288d01e1-af38-4a7b-b806-8a2e54d7fc26",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"tech\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/598",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"598"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.job).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.updatedAt).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Job is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"updatedAt is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/, \"updatedAt is not in a valid date format\");",
							"});"
						],
						"type": "text/javascript",
						"id": "7f8e789a-71e0-44e0-a070-2cc5a70c2534"
					}
				}
			],
			"id": "13f31f8d-8b28-4215-bce7-c29028a60a3a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"qa\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/598",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"598"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEL-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript",
						"id": "0804d50c-91c9-4fbb-b54a-e7e8967113d2"
					}
				}
			],
			"id": "ce8d6d2c-b1ec-4955-b162-ac749bd3b802",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/258",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"258"
					]
				}
			},
			"response": []
		}
	]
}